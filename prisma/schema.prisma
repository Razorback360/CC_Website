// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// <Auth>

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    ext_expires_in    Int?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
    ADMIN
    MEMBER
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    // <Custom>
    studentId    String
    profileImage String?
    role         UserRole @default(MEMBER)

    links       String[]
    tags        String[]
    Semesters   Semester[]
    Events      Event[]
    Attachments Attachment[]

    SystemUpdate SystemUpdate[]
    // </Custom>

    @@unique([id, name])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// </Auth>

model EventCategory {
    id     String  @id @default(cuid())
    name   String
    events Event[]
}

model Event {
    id          String   @id @default(cuid())
    title       String
    description String   @db.Text
    date        DateTime
    public      Boolean  @default(true)

    Organizers  User[]
    Attachments Attachment[]

    Semester   Semester @relation(fields: [semesterId], references: [id], onDelete: Cascade)
    semesterId String

    Category   EventCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
    categoryId String

    link String @db.Text
}

model Semester {
    id     String @id @default(cuid())
    number Int

    Members User[]
    Events  Event[]
}

enum AttachmentType {
    EVENT_POSTER
    EVENT_IMAGE
    EVENT_VIDEO
    EVENT_DOC
}

model Attachment {
    id   String         @id @default(cuid())
    src  String         @db.Text
    type AttachmentType @default(EVENT_IMAGE)

    Event   Event  @relation(fields: [eventId], references: [id])
    eventId String

    Uploader   User   @relation(fields: [uploaderId], references: [id])
    uploaderId String
}

enum SystemUpdateType {
    EVENT_CREATE
    EVENT_UPDATE // title/description/date/category/semester
    EVENT_DELETE
    // TODO add update creations for those ---
    EVENT_ATTACHMENTS_ADD
    EVENT_ATTACHMENTS_DELETE
    EVENT_DOCUMENTATION_ADD
    EVENT_DOCUMENTATION_DELETE
    MEMBER_ADD
    MEMBER_UPDATE // enable/disable/role/tags
    MEMBER_DELETE
    // ----------------------------------------
}

model SystemUpdate {
    id          String           @id @default(cuid())
    type        SystemUpdateType
    referenceId String // id of the record that was updated
    description String           @db.Text
    date        DateTime         @default(now())

    // Relation to the user who made the update
    Author   User   @relation(fields: [authorId], references: [id])
    authorId String
}
