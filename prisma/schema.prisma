// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// <Auth>

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
    MEMBER
    ADMIN
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    role       UserRole  @default(MEMBER)
    member     Member?
    Event      Event?    @relation(fields: [eventId], references: [id])
    eventId    String?
    Semester   Semester? @relation(fields: [semesterId], references: [id])
    semesterId String?

    @@unique([id, name])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// </Auth>

model Member {
    id        String     @id @default(cuid())
    name      String
    studentId String
    links     String[]
    tags      String[]
    semesters Semester[]
    events    Event[]

    user   User?   @relation(fields: [userId, name], references: [id, name], onDelete: Cascade, onUpdate: Cascade)
    userId String? @unique

    @@unique([userId, name])
    @@index([studentId])
}

model Event {
    id          String   @id @default(cuid())
    title       String
    description String?  @db.Text
    date        DateTime
    organizers  Member[]
    semester    Semester @relation(fields: [semesterId], references: [id], onDelete: Cascade)
    semesterId  String
    User        User[]
}

model Semester {
    id      String   @id @default(cuid())
    number  Int
    members Member[]
    events  Event[]
    User    User[]
}
